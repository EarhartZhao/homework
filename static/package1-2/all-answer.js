/* 
第一题：
结果为10，i 为全局变量，变量替换


第二题：
报错，let只能声明一次


第三题：
Math.min(arr)


第四题：
var 声明全局变量，作用域为全局
let 声明块级变量，作用域为块级
const 声明块级变量，声明后不可改变，作用域为块级


第五题：
20，this指向obj对象


第六题：
生成一个全局唯一的值


第七题：
浅拷贝：把当前变量的指针指向数据内存地址
深拷贝：内存中复制一份，并将指针指向复制的数据地址


第八题：
ts是js的超集，以js为基础，做了一些约束，对开发更友好


第九题：
ts优点：增加了代码的可读性和可维护性，非常包容
缺点：学习成本高。会增加开发成本


第十题：
原理：每次引用加一，被释放时减一，当这个值的引用次数变成 0 时，就可以将其内存空间回收
缺点：循环引用


第十一题：
原理：垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后它会去掉环境中的变量已经被环境中变量被标记为引用的变量，在此之后再被标记的变量将被视为准备删除的变量。最后垃圾回收器清除标记的变量，回收它们所占用的内存空间



第十二题：
从 From 空间分配对象，若 semispace 被分配满，则执行 Scavenge 算法进行垃圾回收。
检查 From 空间的存活对象，若对象存活，则检查对象是否符合晋升条件，若符合条件则晋升到老生代，否则将对象从 From 空间复制到 To 空间。
若对象不存活，则释放不存活对象的空间。
完成复制后，将 From 空间与 To 空间进行角色翻转（flip）。


第十三题：
老生代处理垃圾回收时使用
将一次停顿进行的标记过程，分成了很多小步。每执行完一小步就让应用逻辑执行一会儿，这样交替多次后完成标记
*/